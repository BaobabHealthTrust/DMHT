<script language="javascript" type="text/javascript" src="/javascripts/jquery.js"></script>
<script language="javascript" type="text/javascript" src="/javascripts/jquery.flot.js"></script>

<div id="title" style="position: relative; right: -331px; bottom: 510px;">
  <center><h3></h3> </center>
  <div id="choices" style="height: 10px; position: relative;  right: 12px;"> <b>Show:</b>
    <input type="radio" name="vitals" value="0"/> Weight
    <input type="radio" checked="checked" name="vitals" value="1"/> Blood Sugar
    <input type="radio" name="vitals" value="2"/> Blood Pressure
  </div>
</div>
<br/>
<div id="simplegraphholder"style="width: 380px; position: relative; right: -331px; height: 190px; bottom: 510px;">
   
</div>
<script id="source" language="javascript" type="text/javascript">
  jQuery.noConflict();

  var bpGraphData;
  var weightGraphData;

    function setData() {

    var patient_weight = [
        <% @min = Time.now
        @max = Time.now
        @obs = @patient.person.observations.find_by_concept_name("WEIGHT (KG)")
        @obs.sort_by{|obs| obs.obs_datetime}.each do |obs|
        @min = obs.obs_datetime if obs.obs_datetime < @min %>
        [<%= (obs.obs_datetime.to_i * 1000) -%>, /* multiply 1000 to convert time stamp to javascript mode*/
        <%= obs.value_numeric -%>],<% end %>
        ];

    var patient_blood_sugar = [[1256909708000, 150.0],[1257153256000, 255.0],[1257153256000, 353.0]];


    var systolic = [
        <% @min = Time.now
        @max = Time.now
        @obs = @patient.person.observations.find_by_concept_name("SYSTOLIC BLOOD PRESSURE")
        @obs.sort_by{|obs| obs.obs_datetime}.each do |obs|
        @min = obs.obs_datetime if obs.obs_datetime < @min %>
        [<%= (obs.obs_datetime.to_i * 1000) -%>, /* multiply 1000 to convert time stamp to javascript mode*/
        <%= obs.value_numeric -%>],<% end %>
        ];

    var diastolic = [
        <% @min = Time.now
        @max = Time.now
        @obs = @patient.person.observations.find_by_concept_name("DIASTOLIC BLOOD PRESSURE")
        @obs.sort_by{|obs| obs.obs_datetime}.each do |obs|
        @min = obs.obs_datetime if obs.obs_datetime < @min %>
        [<%= (obs.obs_datetime.to_i * 1000) -%>, /* multiply 1000 to convert time stamp to javascript mode*/
        <%= obs.value_numeric -%>],<% end %>
        ];

    var fasting = [
        <% @min = Time.now
        @max = Time.now
        @obs = @patient.person.observations.find_by_concept_name("FASTING")
        @obs.sort_by{|obs| obs.obs_datetime}.each do |obs|
        @min = obs.obs_datetime if obs.obs_datetime < @min %>
        [<%= (obs.obs_datetime.to_i * 1000) -%>, /* multiply 1000 to convert time stamp to javascript mode*/
        <%= obs.value_numeric -%>],<% end %>
        ];

    var random = [
        <% @min = Time.now
        @max = Time.now
        @obs = @patient.person.observations.find_by_concept_name("RANDOM")
        @obs.sort_by{|obs| obs.obs_datetime}.each do |obs|
        @min = obs.obs_datetime if obs.obs_datetime < @min %>
        [<%= (obs.obs_datetime.to_i * 1000) -%>, /* multiply 1000 to convert time stamp to javascript mode*/
        <%= obs.value_numeric -%>],<% end %>
        ];

    var glycated = [
        <% @min = Time.now
        @max = Time.now
        @obs = @patient.person.observations.find_by_concept_name("HbA1c")
        @obs.sort_by{|obs| obs.obs_datetime}.each do |obs|
        @min = obs.obs_datetime if obs.obs_datetime < @min %>
        [<%= (obs.obs_datetime.to_i * 1000) -%>, /* multiply 1000 to convert time stamp to javascript mode*/
        <%= obs.value_numeric -%>],<% end %>
        ];

    bpGraphData = [{color: "green", points: { show: true }, lines: {show: true}, data: systolic,  label: "Systolic"},
                   {color: "red", points: { show: true }, lines: {show: true}, data: diastolic ,  label: "Diastolic"}];

    bsGraphData = [ {color: "blue", bars: {show: true, fill:true, lineWidth: 10}, data: fasting ,  label: "Fasting"},
                    {color: "red", bars: {show: true, fill:true, lineWidth: 10}, data: glycated,  label: "HbA1c (in mg/dl)"},
                    {color: "green", bars: {show: true, fill:true, lineWidth: 10}, data: random,  label: "Random"},];

    weightGraphData = [{data: patient_weight, points: { show: true },lines: {show: true},  label: "Weight"}];


    return weightGraphData;
  }

    function setPlotOptions()  {
    
    var options;

    options = {
          grid: { clickable: true },
          legend: {position:"nw"},
          xaxis: {mode: "time",timeformat: "%y %b"}
        };

    return options;
  }

  /* hard-code color indices to prevent them from shifting as
   the user switches among the graphs */

  var i = 0;
  var datasets =[];

  datasets = setData();

  jQuery.each(datasets, function(key, val) {

    val.color = i;
    ++i;
  });

  // insert checkboxes
  var choiceContainer = jQuery("#choices");
  choiceContainer.find("input").click(plotAccordingToChoices);

  var key;

  function plotAccordingToChoices() {

  var weightOrBloodSugarData = [];

  choiceContainer.find("input:checked").each(function () {
  
    key = jQuery(this).attr("value");
    if (key && datasets[key])
      weightOrBloodSugarData.push(datasets[key]);

    /* draw the BP graph*/
    if (key == 2)
      jQuery.plot(jQuery("#simplegraphholder"),bpGraphData, setPlotOptions());

    if (key == 1)
      jQuery.plot(jQuery("#simplegraphholder"),bsGraphData, setPlotOptions());

    /* draw either the weight or blood sugar graph*/
    else if (weightOrBloodSugarData.length > 0)
      jQuery.plot(jQuery("#simplegraphholder"),weightOrBloodSugarData, setPlotOptions());
  });


  }

  plotAccordingToChoices();

</script>